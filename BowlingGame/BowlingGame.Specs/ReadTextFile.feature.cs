// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18033
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BowlingGame.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ReadATextFileFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ReadTextFile.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Read a text file", "In order to know the scores from bowling games\r\nAs a bowling game app user\r\nI wan" +
                    "t to be able to read text files", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Read a text file")))
            {
                BowlingGame.Specs.ReadATextFileFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read a text file from local file system")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read a text file")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("base_case")]
        public virtual void ReadATextFileFromLocalFileSystem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a text file from local file system", new string[] {
                        "base_case"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I want to load a file called \"scores.txt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("its on my local file system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I press load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("the app should load the file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read a text file that doesnt exists on local file system")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read a text file")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("exception")]
        public virtual void ReadATextFileThatDoesntExistsOnLocalFileSystem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a text file that doesnt exists on local file system", new string[] {
                        "exception"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I want to load a file called \"unexistent.txt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.But("its not on my local file system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 17
 testRunner.When("I press load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("the app should notify me the file doesnt exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read a text file that I dont have access to from local file system")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read a text file")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("exception")]
        public virtual void ReadATextFileThatIDontHaveAccessToFromLocalFileSystem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a text file that I dont have access to from local file system", new string[] {
                        "exception"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I want to load a file called \"prohibited.txt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.And("its on my local file system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.But("I dont have permissions to access it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 25
 testRunner.When("I press load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("the app should notify me the file cant be accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read a text file from a network share")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read a text file")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("base_case")]
        public virtual void ReadATextFileFromANetworkShare()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a text file from a network share", new string[] {
                        "base_case"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("I want to load a file called \"net_scores.txt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.And("its on a network share", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.When("I press load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the app should load the file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read a text file that I dont have access to from a network share")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read a text file")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("exception")]
        public virtual void ReadATextFileThatIDontHaveAccessToFromANetworkShare()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a text file that I dont have access to from a network share", new string[] {
                        "exception"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I want to load a file called \"net_prohibited.txt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.And("its on a network share", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.But("I dont have permissions to access it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 40
 testRunner.When("I press load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("the app should notify me the file cant be accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read a text file from the internet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read a text file")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("base_case")]
        public virtual void ReadATextFileFromTheInternet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a text file from the internet", new string[] {
                        "base_case"});
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
 testRunner.Given("I want to load a file called \"inet_scores.txt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
 testRunner.And("its on a internet server called \"http://localhost/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.When("I press load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("the app should load the file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read a text file that doesnt exists on the internet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read a text file")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("exception")]
        public virtual void ReadATextFileThatDoesntExistsOnTheInternet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a text file that doesnt exists on the internet", new string[] {
                        "exception"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
 testRunner.Given("I want to load a file called \"404.txt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
 testRunner.But("its not on the internet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 54
 testRunner.When("I press load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("the app should notify me the file doesnt exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read a text file that I dont have access to from internet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read a text file")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("exception")]
        public virtual void ReadATextFileThatIDontHaveAccessToFromInternet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a text file that I dont have access to from internet", new string[] {
                        "exception"});
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("I want to load a file called \"403.txt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
 testRunner.And("its on a internet server called \"http://localhost/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.But("I dont have permissions to access it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 62
 testRunner.When("I press load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("the app should notify me the file cant be accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
